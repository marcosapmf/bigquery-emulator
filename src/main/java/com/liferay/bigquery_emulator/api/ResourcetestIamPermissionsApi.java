/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.9.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.liferay.bigquery_emulator.api;

import com.liferay.bigquery_emulator.model.TestIamPermissionsRequest;
import com.liferay.bigquery_emulator.model.TestIamPermissionsResponse;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-04-25T13:50:41.257366434-03:00[America/Recife]", comments = "Generator version: 7.9.0")
@Validated
@Tag(name = "tables", description = "the tables API")
public interface ResourcetestIamPermissionsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /{resource}:testIamPermissions
     * Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a &#x60;NOT_FOUND&#x60; error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \&quot;fail open\&quot; without warning.
     *
     * @param resource REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field. (required)
     * @param alt Data format for the response. (optional)
     * @param fields Selector specifying which fields to include in a partial response. (optional)
     * @param key API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token. (optional)
     * @param oauthToken OAuth 2.0 token for the current user. (optional)
     * @param prettyPrint Returns response with indentations and line breaks. (optional)
     * @param quotaUser An opaque string that represents a user for quota purposes. Must not exceed 40 characters. (optional)
     * @param userIp Deprecated. Please use quotaUser instead. (optional)
     * @param testIamPermissionsRequest  (optional)
     * @return Successful response (status code 200)
     */
    @Operation(
        operationId = "bigqueryTablesTestIamPermissions",
        description = "Returns permissions that a caller has on the specified resource. If the resource does not exist, this will return an empty set of permissions, not a `NOT_FOUND` error. Note: This operation is designed to be used for building permission-aware UIs and command-line tools, not for authorization checking. This operation may \"fail open\" without warning.",
        tags = { "tables" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful response", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TestIamPermissionsResponse.class))
            })
        },
        security = {
            @SecurityRequirement(name = "Oauth2c"),
            @SecurityRequirement(name = "Oauth2")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/{resource}:testIamPermissions",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TestIamPermissionsResponse> bigqueryTablesTestIamPermissions(
        @Parameter(name = "resource", description = "REQUIRED: The resource for which the policy detail is being requested. See [Resource names](https://cloud.google.com/apis/design/resource_names) for the appropriate value for this field.", required = true, in = ParameterIn.PATH) @PathVariable("resource") String resource,
        @Parameter(name = "alt", description = "Data format for the response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "alt", required = false) String alt,
        @Parameter(name = "fields", description = "Selector specifying which fields to include in a partial response.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "fields", required = false) String fields,
        @Parameter(name = "key", description = "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "key", required = false) String key,
        @Parameter(name = "oauth_token", description = "OAuth 2.0 token for the current user.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "oauth_token", required = false) String oauthToken,
        @Parameter(name = "prettyPrint", description = "Returns response with indentations and line breaks.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "prettyPrint", required = false) Boolean prettyPrint,
        @Parameter(name = "quotaUser", description = "An opaque string that represents a user for quota purposes. Must not exceed 40 characters.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "quotaUser", required = false) String quotaUser,
        @Parameter(name = "userIp", description = "Deprecated. Please use quotaUser instead.", in = ParameterIn.QUERY) @Valid @RequestParam(value = "userIp", required = false) String userIp,
        @Parameter(name = "TestIamPermissionsRequest", description = "") @Valid @RequestBody(required = false) TestIamPermissionsRequest testIamPermissionsRequest
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"permissions\" : [ \"permissions\", \"permissions\" ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
